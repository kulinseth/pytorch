const char * index_select_kernel_mps =
"#include <metal_stdlib>\n"
"using namespace metal;\n"
"\n"
"constant int64_t  storage_offset  [[function_constant(0)]];\n"
"constant uint32_t num_indices     [[function_constant(1)]];\n"
"\n"
"struct IndexAB {\n"
"    // Allow up to 30 indices\n"
"    metal::array<device void *, 30>  indexArray [[ id(0) ]];\n"
"};\n"
"\n"
"template<typename T>\n"
"kernel void index_select(device const IndexAB & indexAB           [[buffer(0)]],\n"
"                         device const void    * indexSizes        [[buffer(1)]],\n"
"                         device const void    * indexStrides      [[buffer(2)]],\n"
"                         device const uint3   * offsets           [[buffer(3)]],\n"
"                         device const void    * inputData         [[buffer(4)]],\n"
"                         device void          * outputData        [[buffer(5)]],\n"
"                         uint thread_index [[thread_position_in_grid]]) {\n"
"\n"
"    device const int64_t * index_sizes   = (device const int64_t *)indexSizes;\n"
"    device const int64_t * index_strides = (device const int64_t *)indexStrides;\n"
"    int64_t offset = 0;\n"
"    for (uint32_t i = 0; i < num_indices; i++) {\n"
"        int64_t index = ((device const int64_t*)(indexAB.indexArray[i]))[offsets[thread_index].z / sizeof(int64_t)];\n"
"        if (index < 0) {\n"
"            index += index_sizes[i];\n"
"        }\n"
"        offset += index * index_strides[i];\n"
"     }\n"
"    device T * out = (device T*)((device char*)outputData + offsets[thread_index].x);\n"
"    device T * in  = (device T*)((device char*)inputData  + offsets[thread_index].y + offset + storage_offset * sizeof(T));\n"
"    *out = *in;\n"
"}\n"
"\n"
"template\n"
"[[host_name(\"index_select_float\")]]\n"
"kernel void index_select<float>(device const IndexAB & indexAB       [[buffer(0)]],\n"
"                                device const void    * indexSizes    [[buffer(1)]],\n"
"                                device const void    * indexStrides  [[buffer(2)]],\n"
"                                device const uint3   * offsets       [[buffer(3)]],\n"
"                                device const void    * inputData     [[buffer(4)]],\n"
"                                device void          * outputData    [[buffer(5)]],\n"
"                                uint thread_index [[thread_position_in_grid]]);\n"
"template\n"
"[[host_name(\"index_select_half\")]]\n"
"kernel void index_select<half>(device const IndexAB & indexAB       [[buffer(0)]],\n"
"                                device const void   * indexSizes    [[buffer(1)]],\n"
"                                device const void   * indexStrides  [[buffer(2)]],\n"
"                                device const uint3  * offsets       [[buffer(3)]],\n"
"                                device const void   * inputData     [[buffer(4)]],\n"
"                                device void         * outputData    [[buffer(5)]],\n"
"                                uint thread_index [[thread_position_in_grid]]);\n"
"template\n"
"[[host_name(\"index_select_int32\")]]\n"
"kernel void index_select<int32_t>(device const IndexAB & indexAB       [[buffer(0)]],\n"
"                                  device const void    * indexSizes    [[buffer(1)]],\n"
"                                  device const void    * indexStrides  [[buffer(2)]],\n"
"                                  device const uint3   * offsets       [[buffer(3)]],\n"
"                                  device const void    * inputData     [[buffer(4)]],\n"
"                                  device void          * outputData    [[buffer(5)]],\n"
"                                  uint thread_index [[thread_position_in_grid]]);\n"
"template\n"
"[[host_name(\"index_select_int16\")]]\n"
"kernel void index_select<int16_t>(device const IndexAB & indexAB       [[buffer(0)]],\n"
"                                  device const void    * indexSizes    [[buffer(1)]],\n"
"                                  device const void    * indexStrides  [[buffer(2)]],\n"
"                                  device const uint3   * offsets       [[buffer(3)]],\n"
"                                  device const void    * inputData     [[buffer(4)]],\n"
"                                  device void          * outputData    [[buffer(5)]],\n"
"                                  uint thread_index [[thread_position_in_grid]]);\n"
"template\n"
"[[host_name(\"index_select_uint8\")]]\n"
"kernel void index_select<uint8_t>(device const IndexAB & indexAB       [[buffer(0)]],\n"
"                                  device const void    * indexSizes    [[buffer(1)]],\n"
"                                  device const void    * indexStrides  [[buffer(2)]],\n"
"                                  device const uint3   * offsets       [[buffer(3)]],\n"
"                                  device const void    * inputData     [[buffer(4)]],\n"
"                                  device void          * outputData    [[buffer(5)]],\n"
"                                  uint thread_index [[thread_position_in_grid]]);\n"
"template\n"
"[[host_name(\"index_select_bool\")]]\n"
"kernel void index_select<bool>(device const IndexAB & indexAB       [[buffer(0)]],\n"
"                               device const void    * indexSizes    [[buffer(1)]],\n"
"                               device const void    * indexStrides  [[buffer(2)]],\n"
"                               device const uint3   * offsets       [[buffer(3)]],\n"
"                               device const void    * inputData     [[buffer(4)]],\n"
"                               device void          * outputData    [[buffer(5)]],\n"
"                               uint thread_index [[thread_position_in_grid]]);\n"
"\n";